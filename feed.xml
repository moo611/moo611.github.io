<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://moo611.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://moo611.github.io/" rel="alternate" type="text/html" /><updated>2024-11-16T17:11:41+08:00</updated><id>https://moo611.github.io/feed.xml</id><title type="html">desong的博客</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><author><name>desong</name></author><entry><title type="html">分布式发布订阅系统的设计与实现（三）</title><link href="https://moo611.github.io/2024/10/03/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E4%B8%89.html" rel="alternate" type="text/html" title="分布式发布订阅系统的设计与实现（三）" /><published>2024-10-03T00:00:00+08:00</published><updated>2024-10-03T00:00:00+08:00</updated><id>https://moo611.github.io/2024/10/03/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%89%EF%BC%89</id><content type="html" xml:base="https://moo611.github.io/2024/10/03/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E4%B8%89.html"><![CDATA[<p>在前两篇中，我们介绍了消息订阅系统的基础概念及单节点下的实现。随着系统规模的扩大和性能需求的提升，单节点架构显然无法满足高并发和高可用的需求。本篇将探讨如何在分布式环境下实现发布者、订阅者和代理 Broker，并解决分布式架构中面临的挑战。</p>

<h2 id="系统架构概述">系统架构概述</h2>
<p>在单节点环境下，代理（broker）负责协调发布者和订阅者的交互，存储消息并负责将消息推送给已订阅的客户端，同时还需要将消息同步到其他的代理节点上。</p>

<ol>
  <li>发布者将消息发布到指定的主题（Topic）。</li>
  <li>代理接收到消息后，根据主题找到对应的订阅者。</li>
  <li>代理将消息推送至他连接到的订阅该主题的订阅者。</li>
  <li>代理同步消息到其他代理。</li>
  <li>其他代理将消息推送至各自连接到的订阅该主题的订阅者。</li>
</ol>

<h2 id="实现细节">实现细节</h2>

<h3 id="1-接收其他代理连接">1. 接收其他代理连接</h3>
<p>通过type区分是来自其他代理的连接、来自发布者的连接，还是来自订阅者的连接。如果是来自其他代理的连接，则用BrokerHandler来处理。如果是来自客户端的连接，则用ClientHandler来处理。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 解析命令行参数</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="s">"-b"</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">i</span><span class="o">]))</span> <span class="o">{</span>
                <span class="c1">// 找到 -b 后，拼接所有后面的 broker 地址</span>
                <span class="nc">StringBuilder</span> <span class="n">brokers</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">args</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">brokers</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="n">j</span><span class="o">]).</span><span class="na">append</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span> <span class="c1">// 使用空格拼接多个 broker 地址</span>
                <span class="o">}</span>
                <span class="n">brokersArg</span> <span class="o">=</span> <span class="n">brokers</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span> <span class="c1">// 去掉末尾空格</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(!</span><span class="n">brokersArg</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="c1">// 调用 connectToOtherBrokers 方法，并传递所有 brokers 地址</span>
            <span class="n">connectToOtherBrokers</span><span class="o">(</span><span class="n">brokersArg</span><span class="o">);</span>
            <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">BrokerConnectionListener</span><span class="o">(</span><span class="n">args</span><span class="o">[</span><span class="mi">2</span><span class="o">])).</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>


        <span class="c1">// 接受客户端和其他 Broker 连接</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
            <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
                    <span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>

                    <span class="c1">// 读取初始消息以确定连接类型</span>
                    <span class="nc">String</span> <span class="n">type</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
                    <span class="k">if</span> <span class="o">(</span><span class="s">"BROKER"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
                        <span class="c1">// 这是来自其他 Broker 的连接</span>
                        <span class="n">brokerConnections</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">socket</span><span class="o">);</span>
                        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">BrokerHandler</span><span class="o">(</span><span class="n">socket</span><span class="o">)).</span><span class="na">start</span><span class="o">();</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Accepted connection from another broker."</span><span class="o">);</span>
                    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="s">"SUB"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">||</span> <span class="s">"PUB"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
                        <span class="c1">// 这是来自客户端的连接</span>
<span class="c1">//                        clientConnections.add(socket);</span>
                        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">ClientHandler</span><span class="o">(</span><span class="n">socket</span><span class="o">)).</span><span class="na">start</span><span class="o">();</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Accepted connection from a client."</span><span class="o">);</span>


                        <span class="k">if</span> <span class="o">(</span><span class="s">"SUB"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">type</span><span class="o">)){</span>
                            <span class="n">subscriberCount</span><span class="o">++;</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">subscriberCount</span><span class="o">&gt;</span><span class="no">MAX_SUB</span><span class="o">){</span>
                                <span class="c1">//socket.close();</span>
                                <span class="n">sendResponse</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span><span class="s">"close"</span><span class="o">);</span>
                                <span class="n">subscriberCount</span><span class="o">--;</span>
                            <span class="o">}</span>

                        <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                            <span class="n">publisherCount</span><span class="o">++;</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">publisherCount</span><span class="o">&gt;</span><span class="no">MAX_PUB</span><span class="o">){</span>
                                <span class="c1">//socket.close();</span>
                                <span class="n">sendResponse</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span><span class="s">"close"</span><span class="o">);</span>
                                <span class="n">publisherCount</span><span class="o">--;</span>
                            <span class="o">}</span>

                        <span class="o">}</span>

                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">//e.printStackTrace();</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>

</code></pre></div></div>
<h3 id="2-连接其他代理">2. 连接其他代理</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 连接到其他 Broker</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">connectToOtherBrokers</span><span class="o">(</span><span class="nc">String</span> <span class="n">brokersArg</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">brokers</span> <span class="o">=</span> <span class="n">brokersArg</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">broker</span> <span class="o">:</span> <span class="n">brokers</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">brokerInfo</span> <span class="o">=</span> <span class="n">broker</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">brokerIp</span> <span class="o">=</span> <span class="n">brokerInfo</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
            <span class="kt">int</span> <span class="n">brokerPort</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">brokerInfo</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">Socket</span> <span class="n">brokerSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="n">brokerIp</span><span class="o">,</span> <span class="n">brokerPort</span><span class="o">);</span>
                <span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">brokerSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
                <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"BROKER"</span><span class="o">);</span> <span class="c1">// 发送身份标识</span>
                <span class="n">brokerConnections</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">brokerSocket</span><span class="o">);</span> <span class="c1">// 添加到 Broker 连接列表</span>
                <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">BrokerHandler</span><span class="o">(</span><span class="n">brokerSocket</span><span class="o">)).</span><span class="na">start</span><span class="o">();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Connected to broker: "</span> <span class="o">+</span> <span class="n">brokerIp</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">brokerPort</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Failed to connect to broker: "</span> <span class="o">+</span> <span class="n">brokerIp</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">brokerPort</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">failedBrokers</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">broker</span><span class="o">)){</span>
                    <span class="n">failedBrokers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">broker</span><span class="o">);</span> <span class="c1">// 将失败的 Broker 加入列表</span>
                <span class="o">}</span>

            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

</code></pre></div></div>
<h3 id="3-代理连接监听">3. 代理连接监听</h3>
<p>在代理运行过程中，可能会增加新的代理。创建一个代理监听器来监听。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 监听器类：定期重试连接失败的 Broker</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BrokerConnectionListener</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">brokersArg</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="no">RETRY_INTERVAL</span> <span class="o">=</span> <span class="mi">5000</span><span class="o">;</span> <span class="c1">// 每隔 5 秒重试一次</span>

        <span class="kd">public</span> <span class="nf">BrokerConnectionListener</span><span class="o">(</span><span class="nc">String</span> <span class="n">brokersArg</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">brokersArg</span> <span class="o">=</span> <span class="n">brokersArg</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="no">RETRY_INTERVAL</span><span class="o">);</span>
                    <span class="n">retryFailedConnections</span><span class="o">();</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 重试连接失败的 Broker</span>
        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">retryFailedConnections</span><span class="o">()</span> <span class="o">{</span>
            <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">iterator</span> <span class="o">=</span> <span class="n">failedBrokers</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">iterator</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">broker</span> <span class="o">=</span> <span class="n">iterator</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
                <span class="nc">String</span><span class="o">[]</span> <span class="n">brokerInfo</span> <span class="o">=</span> <span class="n">broker</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">":"</span><span class="o">);</span>
                <span class="nc">String</span> <span class="n">brokerIp</span> <span class="o">=</span> <span class="n">brokerInfo</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>
                <span class="kt">int</span> <span class="n">brokerPort</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">brokerInfo</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">Socket</span> <span class="n">brokerSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="n">brokerIp</span><span class="o">,</span> <span class="n">brokerPort</span><span class="o">);</span>
                    <span class="n">brokerConnections</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">brokerSocket</span><span class="o">);</span>
                    <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">BrokerHandler</span><span class="o">(</span><span class="n">brokerSocket</span><span class="o">)).</span><span class="na">start</span><span class="o">();</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Reconnected to broker: "</span> <span class="o">+</span> <span class="n">brokerIp</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">brokerPort</span><span class="o">);</span>
                    <span class="n">iterator</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span> <span class="c1">// 连接成功后从失败列表中移除</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Retrying failed broker: "</span> <span class="o">+</span> <span class="n">brokerIp</span> <span class="o">+</span> <span class="s">":"</span> <span class="o">+</span> <span class="n">brokerPort</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

</code></pre></div></div>

<h3 id="4-向其他代理同步消息">4. 向其他代理同步消息</h3>
<p>在处理本代理结点的发布者订阅者消息时，需要同步给其他结点。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="c1">// 向其他 Broker 广播消息</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">broadcastToBrokers</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Socket</span> <span class="n">brokerSocket</span> <span class="o">:</span> <span class="n">brokerConnections</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">brokerSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
                <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Failed to broadcast message to broker: "</span> <span class="o">+</span> <span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

</code></pre></div></div>

<h3 id="5-接收并处理其他代理的消息">5. 接收并处理其他代理的消息</h3>
<p>解析来自其他代理的消息，并做出对应处理。如同步创建主题、同步订阅等。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 用于处理其他 Broker 的消息</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">BrokerHandler</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Socket</span> <span class="n">brokerSocket</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">BrokerHandler</span><span class="o">(</span><span class="nc">Socket</span> <span class="n">brokerSocket</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">brokerSocket</span> <span class="o">=</span> <span class="n">brokerSocket</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">brokerSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">())))</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>
                <span class="k">while</span> <span class="o">((</span><span class="n">message</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">handleBrokerMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">//e.printStackTrace();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>


        <span class="c1">// 处理来自其他 Broker 的消息</span>
        <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">handleBrokerMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">command</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>


            <span class="k">switch</span> <span class="o">(</span><span class="n">command</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">case</span> <span class="s">"CREATE"</span><span class="o">:</span>
                    <span class="n">createTopic</span><span class="o">(</span><span class="n">parts</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"PUBLISH"</span><span class="o">:</span>
                    <span class="n">publishMessage</span><span class="o">(</span><span class="n">parts</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"SUBSCRIBE"</span><span class="o">:</span>
                    <span class="n">subscribe</span><span class="o">(</span><span class="n">parts</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"DELETE"</span><span class="o">:</span>
                    <span class="n">deleteTopic</span><span class="o">(</span><span class="n">parts</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"UNSUBSCRIBE"</span><span class="o">:</span>
                    <span class="n">unsubscribe</span><span class="o">(</span><span class="n">parts</span><span class="o">);</span>
                <span class="k">default</span><span class="o">:</span>
                    <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>


        <span class="o">}</span>


        <span class="o">......</span>
    <span class="o">}</span>


</code></pre></div></div>

<h2 id="测试">测试</h2>
<p>依次启动2个代理broker1,broker2, broker1连接publisher、subscriber1；broker2连接subscriber2；subscriber1和subscriber2共同订阅了publisher创建的主题topic。</p>

<p>发布者publisher创建主题,发消息
<img src="/assets/images/ts1.jpg" alt="图1" /></p>

<p>2个不同结点上的订阅者均收到消息
<img src="/assets/images/ts2.jpg" alt="图2" />
<img src="/assets/images/ts3.jpg" alt="图3" /></p>]]></content><author><name>desong</name></author><summary type="html"><![CDATA[在前两篇中，我们介绍了消息订阅系统的基础概念及单节点下的实现。随着系统规模的扩大和性能需求的提升，单节点架构显然无法满足高并发和高可用的需求。本篇将探讨如何在分布式环境下实现发布者、订阅者和代理 Broker，并解决分布式架构中面临的挑战。]]></summary></entry><entry><title type="html">分布式发布订阅系统的设计与实现（二）</title><link href="https://moo611.github.io/2024/10/02/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E4%BA%8C.html" rel="alternate" type="text/html" title="分布式发布订阅系统的设计与实现（二）" /><published>2024-10-02T00:00:00+08:00</published><updated>2024-10-02T00:00:00+08:00</updated><id>https://moo611.github.io/2024/10/02/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%BA%8C%EF%BC%89</id><content type="html" xml:base="https://moo611.github.io/2024/10/02/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E4%BA%8C.html"><![CDATA[<h2 id="系统架构概述">系统架构概述</h2>

<p>在单节点环境下，代理（broker）负责协调发布者和订阅者的交互，存储消息并负责将消息推送给已订阅的客户端。整体流程如下：</p>

<ol>
  <li>发布者将消息发布到指定的主题（Topic）。</li>
  <li>代理接收到消息后，根据主题找到对应的订阅者。</li>
  <li>代理将消息推送至所有订阅该主题的订阅者。</li>
</ol>

<h2 id="实现细节">实现细节</h2>

<h3 id="1-发布者实现">1. 发布者实现</h3>

<p>发布者是客户端系统，负责创建主题并向主题发布消息。发布者可以是任何能够发送消息的应用程序或服务。</p>

<p>发布者通过new Socket创建一个与broker的socket连接。通过PrintWriter来向broker写入消息，通过BufferedReader来读取broker的消息。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// 创建连接到 Broker 的 Socket</span>
        <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="n">brokerIp</span><span class="o">,</span> <span class="n">brokerPort</span><span class="o">);</span>
        <span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
        
        <span class="nc">BufferedReader</span> <span class="n">brokerReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>

        <span class="c1">// 发送身份标识</span>
        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"PUB"</span><span class="o">);</span>


        <span class="c1">// 创建一个线程来处理接收来自 Broker 的消息</span>
        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">response</span><span class="o">;</span>

                <span class="k">while</span> <span class="o">((</span><span class="n">response</span> <span class="o">=</span> <span class="n">brokerReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[来自Broker的响应]: "</span> <span class="o">+</span> <span class="n">response</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"close"</span><span class="o">)){</span>
                        <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"res:"</span><span class="o">+</span><span class="n">brokerReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"socket closed"</span><span class="o">)){</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"发布者数量不能超过5个"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
                <span class="o">}</span>

                <span class="c1">//e.printStackTrace();</span>
            <span class="o">}</span>
        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>


</code></pre></div></div>
<p>发布者创建主题。将主题ID、主题名称、发布者用户名拼成一个字符串，通过socket发送给broker进行处理。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">createTopic</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span><span class="o">,</span> <span class="nc">PrintWriter</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">parts</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[ERROR] 创建参数错误."</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">topicId</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="nc">String</span> <span class="n">topicName</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span>
        <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"CREATE "</span> <span class="o">+</span> <span class="n">topicId</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">topicName</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">username</span><span class="o">;</span>

        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>
<p>发布者发送消息</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">publishMessage</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span><span class="o">,</span> <span class="nc">PrintWriter</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">parts</span><span class="o">.</span><span class="na">length</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[ERROR] 发布参数错误."</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">topicId</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
        <span class="nc">String</span> <span class="n">content</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="s">" "</span><span class="o">,</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="n">parts</span><span class="o">.</span><span class="na">length</span><span class="o">));</span>

        <span class="k">if</span><span class="o">(</span><span class="n">content</span><span class="o">.</span><span class="na">length</span><span class="o">()&gt;</span><span class="mi">100</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[ERROR] 不能超过100个字母."</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"PUBLISH "</span> <span class="o">+</span> <span class="n">topicId</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">content</span><span class="o">+</span> <span class="s">" "</span> <span class="o">+</span><span class="n">username</span><span class="o">;</span>

        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>
<h3 id="2订阅者实现">2.订阅者实现</h3>

<p>订阅者是通过代理订阅特定主题来表达兴趣的客户。他们从代理节点那里接收有关这些主题的实时消息。</p>

<p>订阅者同样也是通过new Socket创建一个与broker的socket连接。通过PrintWriter来向broker写入消息，通过BufferedReader来读取broker的消息。</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
        <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Socket</span><span class="o">(</span><span class="n">brokerIp</span><span class="o">,</span> <span class="n">brokerPort</span><span class="o">);</span>
        <span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>
       
        <span class="nc">BufferedReader</span> <span class="n">brokerReader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>

        <span class="c1">// 发送身份标识</span>
        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"SUB"</span><span class="o">);</span>

        <span class="c1">// 使用多线程来接收Broker的消息</span>
        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>
                <span class="k">while</span> <span class="o">((</span><span class="n">message</span> <span class="o">=</span> <span class="n">brokerReader</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[来自Broker的消息]: "</span> <span class="o">+</span> <span class="n">message</span><span class="o">);</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">message</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"close"</span><span class="o">)){</span>
                        <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"socket closed"</span><span class="o">)){</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"订阅者数量不能超过10个"</span><span class="o">);</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}).</span><span class="na">start</span><span class="o">();</span>


</code></pre></div></div>
<p>订阅者订阅主题时，将主题ID、订阅者用户名拼成消息，发送给broker</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">subscribe</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span><span class="o">,</span> <span class="nc">PrintWriter</span> <span class="n">out</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">parts</span><span class="o">.</span><span class="na">length</span> <span class="o">!=</span> <span class="mi">2</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[ERROR] 订阅参数错误."</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">topicId</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>

        <span class="nc">String</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"SUBSCRIBE "</span> <span class="o">+</span> <span class="n">topicId</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">username</span><span class="o">;</span>


        <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<h3 id="3代理实现">3.代理实现</h3>

<p>代理是分布式消息订阅系统的核心，负责管理主题、订阅和消息分发。代理节点相互连接，形成一个网络，管理主题创建、主题列表、订阅者列表和消息路由，确保消息能够在不同的主题和订阅者之间有效地传递。</p>

<p>在单节点下，代理只需要接收来自订阅者或者发布者的消息，并进行相应处理即可，而不需要考虑多个结点之间的消息同步问题。</p>

<p>通过serverSocket.accept()获取来自发布者或者订阅者的socket。</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
        <span class="nc">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ServerSocket</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
        <span class="c1">// 接受客户端连接</span>
        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
            <span class="k">new</span> <span class="nf">Thread</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="o">{</span>
                <span class="k">try</span> <span class="o">{</span>
                    <span class="nc">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
                    <span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">);</span>

                    <span class="c1">// 读取初始消息以确定连接类型</span>
                    <span class="nc">String</span> <span class="n">type</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
                    <span class="k">if</span> <span class="o">(</span><span class="s">"SUB"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">type</span><span class="o">)</span> <span class="o">||</span> <span class="s">"PUB"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
                        <span class="c1">// 这是来自客户端的连接</span>
<span class="c1">//                        clientConnections.add(socket);</span>
                        <span class="k">new</span> <span class="nf">Thread</span><span class="o">(</span><span class="k">new</span> <span class="nc">ClientHandler</span><span class="o">(</span><span class="n">socket</span><span class="o">)).</span><span class="na">start</span><span class="o">();</span>
                        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Accepted connection from a client."</span><span class="o">);</span>


                        <span class="k">if</span> <span class="o">(</span><span class="s">"SUB"</span><span class="o">.</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">type</span><span class="o">))</span> <span class="o">{</span>
                            <span class="n">subscriberCount</span><span class="o">++;</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">subscriberCount</span> <span class="o">&gt;</span> <span class="no">MAX_SUB</span><span class="o">)</span> <span class="o">{</span>
                                <span class="c1">//socket.close();</span>
                                <span class="n">sendResponse</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span> <span class="s">"close"</span><span class="o">);</span>
                                <span class="n">subscriberCount</span><span class="o">--;</span>
                            <span class="o">}</span>

                        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                            <span class="n">publisherCount</span><span class="o">++;</span>
                            <span class="k">if</span> <span class="o">(</span><span class="n">publisherCount</span> <span class="o">&gt;</span> <span class="no">MAX_PUB</span><span class="o">)</span> <span class="o">{</span>
                                <span class="c1">//socket.close();</span>
                                <span class="n">sendResponse</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span> <span class="s">"close"</span><span class="o">);</span>
                                <span class="n">publisherCount</span><span class="o">--;</span>
                            <span class="o">}</span>

                        <span class="o">}</span>

                    <span class="o">}</span>
                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                    <span class="c1">//e.printStackTrace();</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}).</span><span class="na">start</span><span class="o">();</span>
        <span class="o">}</span>
</code></pre></div></div>
<p>创建一个ClientHandler实现Runnable接口，用于在子线程中处理各种来自发布者或订阅者的消息</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ClientHandler</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Socket</span> <span class="n">clientSocket</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">ClientHandler</span><span class="o">(</span><span class="nc">Socket</span> <span class="n">socket</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">clientSocket</span> <span class="o">=</span> <span class="n">socket</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedReader</span> <span class="n">in</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">()));</span>
                 <span class="nc">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PrintWriter</span><span class="o">(</span><span class="n">clientSocket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">(),</span> <span class="kc">true</span><span class="o">))</span> <span class="o">{</span>

                <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>
                <span class="k">while</span> <span class="o">((</span><span class="n">message</span> <span class="o">=</span> <span class="n">in</span><span class="o">.</span><span class="na">readLine</span><span class="o">())</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">handleClientMessage</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">clientSocket</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">//e.printStackTrace();</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 处理来自客户端的消息</span>
        <span class="kd">private</span> <span class="kt">void</span> <span class="nf">handleClientMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nc">Socket</span> <span class="n">socket</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">parts</span> <span class="o">=</span> <span class="n">message</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">command</span> <span class="o">=</span> <span class="n">parts</span><span class="o">[</span><span class="mi">0</span><span class="o">];</span>

            <span class="k">switch</span> <span class="o">(</span><span class="n">command</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">case</span> <span class="s">"CREATE"</span><span class="o">:</span>
                    <span class="n">createTopic</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span> <span class="n">socket</span><span class="o">);</span>
                    
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"PUBLISH"</span><span class="o">:</span>
                    <span class="n">publishMessage</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span> <span class="n">socket</span><span class="o">);</span>
                    
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"SHOW"</span><span class="o">:</span>
                    <span class="n">showSubscribers</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span> <span class="n">socket</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"DELETE"</span><span class="o">:</span>
                    <span class="n">deleteTopic</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span> <span class="n">socket</span><span class="o">);</span>
                    
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"SUBSCRIBE"</span><span class="o">:</span>
                    <span class="n">subscribe</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span> <span class="n">socket</span><span class="o">);</span>
                    
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"DISPLAY"</span><span class="o">:</span>
                    <span class="n">displayTopics</span><span class="o">(</span><span class="n">socket</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"CURRENT"</span><span class="o">:</span>
                    <span class="n">showCurrentSubscriptions</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span><span class="n">socket</span><span class="o">);</span>
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">case</span> <span class="s">"UNSUBSCRIBE"</span><span class="o">:</span>
                    <span class="n">unsubscribe</span><span class="o">(</span><span class="n">parts</span><span class="o">,</span> <span class="n">socket</span><span class="o">);</span>
                    
                    <span class="k">break</span><span class="o">;</span>
                <span class="k">default</span><span class="o">:</span>
                    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"[ERROR] 客户端非法指令."</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="o">......</span>


    <span class="o">}</span>

</code></pre></div></div>

<h2 id="测试">测试</h2>

<p>依次启动代理、订阅者和发布者。先由发布者创建主题，订阅者订阅主题，然后发布者发布消息，订阅者成功接收到消息。这样，单节点下的发布者订阅者功能已经实现。我们将在下一篇实现多节点下的发布订阅系统。
<img src="/assets/images/ss1.jpg" alt="图1" />
<img src="/assets/images/ss2.jpg" alt="图2" /></p>]]></content><author><name>desong</name></author><summary type="html"><![CDATA[系统架构概述]]></summary></entry><entry><title type="html">分布式发布订阅系统的设计与实现（一）</title><link href="https://moo611.github.io/2024/10/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E4%B8%80.html" rel="alternate" type="text/html" title="分布式发布订阅系统的设计与实现（一）" /><published>2024-10-01T00:00:00+08:00</published><updated>2024-10-01T00:00:00+08:00</updated><id>https://moo611.github.io/2024/10/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0%EF%BC%88%E4%B8%80%EF%BC%89</id><content type="html" xml:base="https://moo611.github.io/2024/10/01/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0-%E4%B8%80.html"><![CDATA[<h2 id="引言">引言</h2>

<p>分布式消息订阅系统是一种用于处理和分发消息的架构，旨在实现高效、可靠的信息传递。该系统主要由三个组件组成：代理、发布者和订阅者。</p>

<h2 id="主要组件">主要组件</h2>

<h3 id="1-代理">1. 代理</h3>

<p>代理是分布式消息订阅系统的核心，负责管理主题、订阅和消息分发。代理节点相互连接，形成一个网络，管理主题创建、主题列表、订阅者列表和消息路由，确保消息能够在不同的主题和订阅者之间有效地传递。</p>

<h3 id="2-发布者">2. 发布者</h3>

<p>发布者是客户端系统，负责创建主题并向主题发布消息。发布者可以是任何能够发送消息的应用程序或服务。发布者具体的功能：</p>

<p>1、创建新主题：生成唯一的主题 ID（例如 UUID）并分配名称（不一定是唯一的，因为多个发布者可能有同名的主题）。</p>

<p>2、向已有的 Topic 发布消息：通过 Topic 的 Broker 发送消息，使用唯一的主题 ID。该消息应发送给所有主题订阅者。每条消息将被限制最多 100 个字符。不需要在任何代理中保留消息。</p>

<p>3、显示订阅者计数：显示与此相关的每个主题的订阅者总数。</p>

<p>4、删除主题：从系统中删除该主题并自动取消订阅所有当前订阅抄写员。应向每个订阅者发送一条通知消息。</p>

<h3 id="3-订阅者">3. 订阅者</h3>

<p>订阅者是通过代理订阅特定主题来表达兴趣的客户。他们从代理节点那里接收有关这些主题的实时消息。订阅者具体的功能：</p>

<p>1、列出所有可用主题：检索经纪网络中所有可用主题的列表，包括主题 ID、主题名称和发布者名称。</p>

<p>2、订阅主题：使用主题的唯一 ID 订阅主题。订阅者将收到关于此主题的所有未来消息。</p>

<p>3、显示当前订阅：列出活动订阅，包括主题 ID、主题名称和发布者姓名。</p>

<p>4、取消订阅主题：停止接收来自主题的消息。代理发送通知确认取消订阅的消息</p>

<p><img src="/assets/images/broker.jpg" alt="图1" /></p>

<h2 id="设计思路">设计思路</h2>

<p>1、无论是结点和发布者、订阅者之间的通信，还是结点之间的通信，都基于socket。</p>

<p><img src="/assets/images/socket.jpg" alt="图2" /></p>

<p>2、创建一个线程，来实现消息订阅者、发布者之间的通信。创建一个主题类，用于存储订阅者，确保发布者往该主题发布消息时，能通知该主题下的订阅者。</p>

<p>3、创建另一个线程，来实现多个结点互连。当一个结点收到指令的时候，确保其他的结点也接收到通知，来保证消息的同步性。</p>

<p>基于以上的思路，我们逐步实现这一系统。具体的实现将在下一篇介绍。</p>]]></content><author><name>desong</name></author><summary type="html"><![CDATA[引言]]></summary></entry></feed>